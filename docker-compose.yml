version: '3.4'

services:

  api:
    container_name: api
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    command: dockerize -wait tcp://db:5432 -timeout 90s -- web
    env_file:
      - .env
    environment:
      - "PYTHONUNBUFFERED=1"
    ports:
      - "8000:8000"
    volumes:
      - ./:/opt
    restart: on-failure
    depends_on:
      - db
      - rabbitmq


  db:
    container_name: db
    hostname: db
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    ports:
      - "5433:5432"
    env_file:
      - .env
    volumes:
      - database-data:/var/lib/postgresql/data/
    restart: on-failure

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:latest
    ports:
      - "5672:5672"
    restart: on-failure

  celery_worker:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    command: dockerize -wait tcp://db:5432 -wait tcp://rabbitmq:5672 -timeout 90s -- celery
    depends_on:
      - api
      - db
      - rabbitmq
    deploy:
      # replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 200M
    restart: on-failure

  celery_beat:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    command: dockerize -wait tcp://db:5432 -wait tcp://rabbitmq:5672 -timeout 90s -- celerybeat
    depends_on:
      - api
      - db
      - rabbitmq
    restart: on-failure

networks:
  main:
volumes:
  database-data: