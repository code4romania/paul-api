#!/bin/sh

DOCKERIZE=""
prefix="dockerize"

PORT=${PORT:-"8000"}

RUN_SEED=${RUN_FEED:-"no"}
RUN_MIGRATION=${RUN_MIGRATION:-"yes"}
RUN_DEV_SERVER=${RUN_DEV_SERVER:-"no"}
# RUN_COLLECT_STATIC=${RUN_COLLECT_STATIC:-"no"}
RUN_CREATE_SUPER_USER=${RUN_CREATE_SUPER_USER:-"no"}

if [[ "$1" == "$prefix" ]];
then
    DOCKERIZE="dockerize"
    shift
    while [[ "$1" != '--' ]] ;
    do
        DOCKERIZE="$DOCKERIZE $1"
        shift
    done
    shift
fi

exec_web(){
    echo "Checking..."
    python3 manage.py check

    if [ "$RUN_MIGRATION" == "yes" ] ; then
      echo "Migrating databse"
      python3 manage.py migrate --run-syncdb
    fi

    # if [ "$RUN_COLLECT_STATIC" == "yes" ] ; then
    #   echo "Collect static"
    #   mkdir -p static
    #   python3 manage.py collectstatic --noinput
    # fi

    python3 manage.py seed-frontend-domain

    if [ "$RUN_SEED" == "yes" ] ; then
      echo "Feed"
      python3 manage.py feed-json
    fi

    # if [ "$RUN_CREATE_USER_USER" == "yes" ] ; then
    #   echo "Create superuser"
    #   python3 manage.py createsuperuser --noinput
    # fi

    if [ "$RUN_DEV_SERVER" == "yes" ] ; then
      echo "Start web server on $PORT"
      python3 manage.py runserver "0.0.0.0:$PORT"
    else
      exec gunicorn paul_api.wsgi --bind "0.0.0.0:$PORT" --log-level info -k gevent -w 10
    fi
}

case "$1" in
    "web")         exec_web;;
    "celery")      exec celery -A paul_api worker -l DEBUG;;
    "celerybeat")  exec celery -A paul_api beat -l DEBUG;;
esac

exec "$@"